/***********************************************************************//**
	@file
***************************************************************************/
#include <iostream>
#include "Parser.hpp"
/***********************************************************************//**
	@brief 
***************************************************************************/
void Parser::parse(const std::string& file) {
  if(getInput().read(file)) {
    auto result = rules();
    dump(std::cout, result);
  }
  else {
    std::ostringstream stream;
    stream << "read error, '" << file << "'";
    error(stream.str());
  }
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onGetToken(const std::string& pattern) {
  if(pattern == "''") {
    return getInput().getString("'", "'");
  }
  else if(pattern == "\"\"") {
    return getInput().getString("\"", "\"");
  }
  else if(pattern == "//") {
    return getInput().getString("/", "/");
  }
  return super::onGetToken(pattern);
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onRules(const List& args) {
  auto list = std::make_shared<List>();
  list->push_back(args[1]);
  return list;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::appendRules(const List& args) {
  auto list = std::make_shared<List>(*std::any_cast<std::shared_ptr<List>>(args[1]));
  list->push_back(args[2]);
  return list;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::appendRule(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onSemantics(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::appendSemantics(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onSemantic(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onTokens(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::appendTokens(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::tokenRule(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::tokenString(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::tokenRegexp(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onActionRule(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onActionArg(const List& args) {
  return std::any();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onArgs(const List& args) {
  List v;
  v.push_back(args[1]);
  return std::any(v);
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::appendArgs(const List& args) {
  auto v = std::any_cast<List>(args[1]);
  v.push_back(args[2]);
  return std::any(v);
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::any Parser::onArg(const List& args) {
  return std::any(std::stoi(std::any_cast<std::string>(args[1])));
}
/***********************************************************************//**
	$Id$
***************************************************************************/
